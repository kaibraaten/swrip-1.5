What you're looking at is an implementation of the observer pattern (aka
publisher-subscriber), inspired by the .NET event mechanism. The neat (imho)
thing about this implementation is that neither the publisher nor the
subscriber need to be part of any special class hierarchy. The publisher
uses the Event class by composition, and the subscriber needs to have an
event handler member function with a specific signature. You can also register
regular global non-member functions as event handlers.

See test.cpp for an example of how to use the code. Note that while
event.hpp contains a few different classes, you only need to use the
Event class. The code should be extremely straight forward to use, I hope.

Additionally I've created a C interface to this code. Since C doesn't have
templates I've create a library where Event is of type Event<void*>.
